<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAACMuAAAjLgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABfb18QX29fEI+fjxCfr58Qj5+PEH+PfxBPb18Qb39vEK+v
        rxBPb08Qtsi2Dp+vnxCPn48Qj5+PEI+fjxBvf28Qj5+PEG+PfxA/Tz8Qf49/EF9/bxCPn48Qv8+/EE9v
        TxBvf28QLz8vEE9fPxAAAAAAAAAAAAAAAAAAAAAAAAAAAFtvW8BablrOhpqKzqKxoM6Gl4XOhJmGzmF7
        Zs5xiXbOqriszlR1W862xbe2n7SjzpSplc6No4/OiqCOznSOeM6Fl4bOdY96zkVcRs5+j37OboNwzpmp
        mc66xLnOVGxVzmp/Zs4sQS3OUWdJxQAAAAAAAAAAAAAAAAAAAAAAAAAAP1s/cDxLO/9lemT/lqKR/1lx
        V/+YopT/mqud/3iNef+UpJT/jZ+O/4CVgv+ksaL/oq6g/4SYgv97jXn/pLCh/1xuWf9vg27/iZyJ/42c
        i/+OoI3/lKGR/2qBaf9fbFn/RVhC/zVGNf9WbFSWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHzAg5lZm
        U/9FVUP/dot4/3aLdv+ns6f/gJWC/2R7Zf9sgm7/kaOO/4GTfv+Pn4j/jp2I/4CTff9kemP/XHNe/4GN
        fP+dqpv/qbao/1hzWv+CkH//Znhh/0FUP/9EV0P/S2VN8wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABablpmh5OD/4WQgP9qgGn/TWNNFwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGZ/Zgpcc1vhiZF+/4CVe7oAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHKIcjx0hG3/hpN4EwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqqqqA09o
        TpMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAVX9VBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////AAAAHwAAAB8AAAAfgAAAP4AAAD/AAAA/wAAAf+AAAH/gA
        AD/8AAA//AAAP/wAAD/8AAA//AAAP/wAAD//gAH//8AB///AA///4AP//+AH///wB///8A////gP///4
        H////B////w////+P////n////9///////8=
</value>
  </data>
</root>